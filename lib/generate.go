package main

import (
	"bytes"
	"fmt"
	"go/format"
	"os"
	"path/filepath"
)

func main() {
	if err := createInitFile("init_windows.go", "libffi-8.dll", "windows && (amd64 || arm64)"); err != nil {
		panic(err)
	}

	if err := createInitFile("init_darwin.go", "libffi.8.dylib", "darwin && (amd64 || arm64)"); err != nil {
		panic(err)
	}

	// if err := createInitFile("init_unix.go", "libffi.8.so", "unix && !darwin && (amd64 || arm64)"); err != nil {
	// 	panic(err)
	// }
}

func createInitFile(filename string, library string, gobuild string) error {
	path := filepath.Join("lib", library)

	data, err := os.ReadFile(path)
	if err != nil {
		return err
	}

	var buf bytes.Buffer
	buf.WriteString("// Code generated by go generate ./...; DO NOT EDIT.\n")
	buf.WriteString("//go:build " + gobuild + "\n\n")
	buf.WriteString("package ffi\n\n")
	buf.WriteString("const libName = \"" + library + "\"\n\n")
	buf.WriteString("var libData = []byte{")

	for i, b := range data {
		if i%15 == 0 {
			buf.WriteByte('\n')
		}

		fmt.Fprintf(&buf, "%#02x,", b)
	}

	buf.WriteString("\n}\n")

	dst, err := format.Source(buf.Bytes())
	if err != nil {
		return err
	}

	return os.WriteFile(filename, dst, 0666)
}
